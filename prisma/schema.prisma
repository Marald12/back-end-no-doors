// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  password          String
  isEntityFace      Boolean
  fullName          String
  phone             String
  avatarPath        String?            @default("/uploads/avatar/default-avatar.png")
  companyName       String?            @default("")
  iin               BigInt?            @default(0)
  kpp               BigInt?            @default(0)
  ogrp              BigInt?            @default(0)
  legalAddress      String?            @default("")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  favoritesProducts FavoritesOnUsers[]
  basket            Basket?
}

model Product {
  id               Int                     @id @default(autoincrement())
  title            String
  type             String
  imagePath        String
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  views            Int?                    @default(0)
  price            Int
  phone            Phone                   @relation(fields: [phoneId], references: [id])
  phoneId          Int
  favoritesOnUsers FavoritesOnUsers[]      @ignore
  basketItems      BasketItemsOrProducts[] @ignore
  category         Category?               @relation(fields: [categoryId], references: [id])
  categoryId       Int?
}

model FavoritesOnUsers {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int

  @@id([productId, userId])
}

model Category {
  id        Int       @id @default(autoincrement())
  title     String
  products  Product[]
  imagePath String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  phone     Phone?    @relation(fields: [phoneId], references: [id])
  phoneId   Int?
}

model Phone {
  id         Int        @id @default(autoincrement())
  title      String
  imagePath  String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  brand      Brand      @relation(fields: [brandId], references: [id])
  brandId    Int
  products   Product[]
  categories Category[]
}

model Brand {
  id        Int      @id @default(autoincrement())
  title     String
  imagePath String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phones    Phone[]
}

model Basket {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  user      User                  @relation(fields: [userId], references: [id])
  userId    Int                   @unique
  items     BasketItemsOrBasket[]
}

model BasketItem {
  id        Int                     @id @default(autoincrement())
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  products  BasketItemsOrProducts[]
  count     Int
  orders    OrderOrBasketItems[]    @ignore
  baskets   BasketItemsOrBasket[]   @ignore
}

model BasketItemsOrBasket {
  basket       Basket     @relation(fields: [basketId], references: [id])
  basketId     Int
  basketItem   BasketItem @relation(fields: [basketItemId], references: [id])
  basketItemId Int

  @@id([basketItemId, basketId])
}

model BasketItemsOrProducts {
  product      Product    @relation(fields: [productId], references: [id])
  productId    Int
  basketItem   BasketItem @relation(fields: [basketItemId], references: [id])
  basketItemId Int

  @@id([productId, basketItemId])
}

model Order {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  products  OrderOrBasketItems[]
}

model OrderOrBasketItems {
  order        Order      @relation(fields: [orderId], references: [id])
  orderId      Int
  basketItem   BasketItem @relation(fields: [basketItemId], references: [id])
  basketItemId Int

  @@id([basketItemId, orderId])
}
